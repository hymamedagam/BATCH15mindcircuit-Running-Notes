Commands used in git:
git init --> creates or initializes an empty git repository.
1) git --version ---> Shows installed Git version.
2) git config --> Sets Git configuration for the current repository only.
3)git config --global ---> Sets Git configuration for all repositories for the current user.
4) git config --global --list ---> to view configurations globally
5) git config --list --local ---> to view configurations locally
6) git add --> stage(move) files from working directory to staging area, so the files can be tracked.
7) git commit -m "commit message" --> The staged change is saved permanently in your local repo as a snapshot.
8) git status --> Shows the state of the working directory and staging area.
9) git log --> displays all commits history
10) git show <commit_id> --> displays the detailed information about specific commit.
11) git clone <remote repo url> --> creates a copy of remote repository in your local repository.
12) git fork (not a git command) --> Create my own copy of someone else's repo under my GitHub account.
13) git cherry-pick --> Apply a specific commit from another branch onto your current branch.
14) git pull --rebase --> Fetch and reapply your local commits on top of the remote branch â€” makes history cleaner than a merge.
15) git pull --> Fetching and merging remote changes into your current branch with a merge commit (if needed).
	git pull = git fetch + git merge origin
16) git fetch --> Downloading the latest changes from the remote without merging them into your current branch.
------------------
17) git merge --> Combines two branches by creating a new merge commit. Keeps full branch history.
18) git rebase --> Moves or re-applies commits from one branch on top of another. Creates a cleaner, linear history.
Main Difference:
Merge: Preserves history â†’ results in a branching history with merge commits.

Rebase: Rewrites history â†’ results in a linear history without merge commits.
-----------------
19) git push --> uploads your local commits to a remote repository (like GitHub).
pushing" your changes from your computer to the cloud, so others can see or collaborate on your work.
A general push â€“ uses defaults or config settings (might push multiple branches).

 20 ) git push origin <branch_name> --> A specific push â€“ you tell Git exactly which branch and where to push it.
      git push origin main --> Pushes only the main branch( from local repo) to the remote named origin.
--------------------
21) git remote: "Who are my remotes?"
 --> Lists the names of remote repositories (like origin).
22) git remote -v: "Where do they point to?
--> Lists the names and URLs of remotes (shows fetch & push URLs).
------------------------
Branches - Local Repo
===========
23) git branch : check the status of branch/which branch it is
git branch <branch name> : create a new branch
git checkout <branch name> : switch between branches
git checkout -b <branch name>: create and switch to a new branch
git checkout main/master
git merge <branch name>

git branch -d <branch name>: deletes the branch after merging with the main branch
git branch -D <branch name>: deletes the branch without merging with the main branch

git branch:
Lists local branches in your repository.

git branch -r:
Lists remote branches (i.e., branches on remotes like origin).

git branch -a:
lists both local and remote branches.

git checkout <branch_name> -- --> if the file and branch contains same name it throws an error to which one git checkout(file or branch).
so use --

Remote Repo
============
git push <GitHub url> <branch name> or git push origin main --> push main branch to remote repo
git push origin -d <branch name> --> delete a branch in central repo
------------------------

24) alias : used for shortcuts
eg: git config --global alias.s "status"
so we can use (git s) instead of (git status)

25) unset: remove a specific configuration setting.
 git config --global --unset alias.s 
------------------------
26) --amend --> The --amend option is used with git commit to edit/modify the most recent commit.
â†’ Use --amend to fix or update it instead of making a new commit.
Fixes the last commit message.

git commit --amend -m "commit message that you want to modify"

27) -am --> -am used for modified files only, not suitable for new files.
Itâ€™s a quick way to commit changes without using git add first, only for files already being tracked.


git commit -am "message"

This combines two flags:
-a: Stage all tracked (modified) files.
-m: Provide a commit message.

-----------------------------------

28) git revert <commit_id> --> git revert is used to undo a specific commit by creating a new one that reverses its changes.

29) git reset : Moves the branch pointer to an earlier commit or undo commits or unstage files by moving the HEAD pointer to previous commit.
git reset HEAD <filename> --> to remove it from the staging area (unstage a file) (staging area to working directory)
git reset --soft <commit_id> -->Keep changes in staging (ready to commit)  (local repo to staging area)
git reset --mixed <commit_id> (default) -->	Keep changes in working directory (unstaged)  (local repo to working directory)
git reset --hard -->Delete all changes (dangerous!)

---------------------
30) git tag: Mark specific points in history (like releases). Tags are used to label commits, often for releases or versions.

31) git clean -->removes untracked files or directories from your working directory.
32) git bisect --> It helps you quickly find which commit caused a problem(like a bug or error)
33) git stash --> Temporarily saves uncommitted changes
34) .gitignore: .gitignore is a special file in a Git project where you specify which files and folders Git should ignore(i.e., not track or commit).
.gitignore only applies to untracked files.

35) git diff: Show the differences between various states of your files and commits in a Git repository.
--> mainly used to track and review changes during development.

36) git reflog :  shows a log of all recent actions (like commits, resets, checkouts) that changed your branch or HEAD 
â€” even those not in regular Git history.
A secret history of what you've done in Git."

Great for:
You can use these to recover lost commits:
Debugging "what just happened?"

========================

Pull Requests:A pull request is a way to propose changes to a codebase.
Let others to review and approve your code before merging into the main branch.

Issues:An issue is used to report bugs, suggest features, or ask questions.
ðŸ“Œ Use it to:
Track work that needs to be done.
Discuss problems or ideas with teammates.

GitHub actions:
GitHub Actions lets you automate tasks, like testing code, building apps, or deploying.

ðŸ“Œ Use it to:
Automatically run tests when code changes.
Deploy apps when code is pushed.
Set up CI/CD (Continuous Integration / Deployment).

-----------------
How to create a bare repository:
 --> git init --bare my-repo.git
1) Does not have a working directory
That means you can't edit files or run git add, git commit, etc., directly in i
2) âœ… Is used mainly for collaboration or as a central/shared remote
For example: a Git server repository others push to and pull from.

Git branching strategy:
"We used the Git Flow branching strategy in our project.
It includes branches like:
main (for production-ready code),
develop (for the latest development work),
and feature, bugfix, release, and hotfix branches as needed.
This helped us organize our work, manage releases, and fix issues without affecting the main codebase."


ðŸ§¾ Who Introduced Git and When?
Git was created by Linus Torvalds, the same person who created Linux.

It was introduced in the year 2005.











