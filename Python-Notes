  
IF SHELL IS ALREADY THERE , WHY PYTHON ??
	
	
THEN WHY PYTHON ???
	  
SHELL SCRIPT IS NOT ACTUALY PROGRAMMING  -->  IT IS MORE OF AUTOMATION OF SHELL TASKS / LINUX COMMANDS / LINUX BASED TASKS AUTOMATION	  

    -- IS a command-line interpreter and scripting language for Unix-like operating systems 
	-- NOT FOR WINDOWS - POWERSHELL
    -- used for running and automating command-line tasks.
    -- Ideal for automating system-level tasks, managing files, running system commands, and writing small utility scripts ...
	
======================================	  


PYTHON :
      -- IT IS PROGRAMMING LANGUAGE, A HIGH-LEVEL, GENERAL-PURPOSE PROGRAMMING LANGUAGE.
      -- CLEAN, READABLE SYNTAX. 
	  -- OOP
	  -- SUPPORTS  OBJECT-ORIENTED, IMPERATIVE, FUNCTIONAL, AND PROCEDURAL PROGRAMMING PARADIGMS.
	  -- USED FOR WEB DEVELOPMENT, DATA ANALYSIS, MACHINE LEARNING, AUTOMATION(DEVOPS) , SCIENTIFIC COMPUTING, AND MORE.
	  -- OUR SCOPLE IS LIMITED TO PYTHON SCRIPTING FOR DEVOPS ACTIVITIES 
	  -- OOP focuses on the concepts of classes, objects, inheritance, encapsulation, polymorphism, and abstraction.
	  
	 

PROGRAM        --> MULTIPLE LINES OF CODE / INSTRUCTIONS--> SOFTWARE --> TO CPU -- PROCESSOR 
               -- Collection of code 
			   -- It manipulates data 
			   -- To store data we use variables 
	 

==================

WHAT IS VARIABLE ?   
   - a storage unit / container to store data .
   - to store data we use variables 


 x = "madhu"
==================

WHAT IS DATATYPE ?
Data tyes -- diffrent types of DATA , kinds of values that can be stored and manipulated
               
			   
			   Text -- str 
			   Numeric - int, float, complex 
			   Boolean - Bool (Only T / F ) 			   
			   
			   Sequence of items -- list, range, tuple  ( to store multiple items of diff data types ) 
			   Mapping -- Dictionary 
			   set - set 


 X  = [ 10, 9.8 , "KIRAN" , true ] 
========================================================
	 
READING AND PRINTIN DATA in python  


python    --->  input , print


# Reading input from the user
name = input("Enter your name: ")

# Printing the data
print("Hello,", {name})

---------------------------------------------
shell script   --> read , echo 

#!/bin/bash

# Reading input from the user
read -p "Enter your name: " name

# Printing the data
echo "Hello, $name"


=============================================================

OPERATORS :


   sum =  a + b

  ARITHMETIC   --->  + , - , * , /, %
  
  ASSIGNMENT   --->   = , +=, -+ , *=
  
  a=5 
  a*=2  ---> a = a*2 
  
  7 <  5 
   
  COMPARISION  --->    < , > , <= , >= , == , !=  ( true / false ) 
                      -eq , -lt , -le , -gt, -ge
  
  LOGICAL      --->  T & T -- T 
  
  IDENTITY     --->    is (==) is not (!=) 
  
  MEMBERSHIP   --->   in , not in 
  
  BITWISE     --->  & | ! ^ 

==================================================
EXAMPLE : 
python:

num1 = float(input("Enter the first number: "))
num2 = float(input("Enter the second number: "))


sum = num1 + num2


print(f"The sum of {num1} and {num2} is: {sum}")

==========================
#!/bin/bash

echo "Enter 1st numner"
read num1

echo "Enter 2nd  numner"
read num2

sum=$((num1+num2))

echo "sum of the 2 no is : $sum"




====================================================================

int , float , string , boolean 

LIST VS TUPLE  VS SET VS DICTIONARY 

( to store multiple items of different data types )


x = [ 1, 3.4, "madhu" , 4+5i, true ]

x = ( 1, 3.4, "madhu" , 4+5i, true )

x = { 1, 3.4, "madhu" , 4+5i, true }

   mC_list = [1, 2, 3, 4, 5, 6 ,7,1]   ---> []   --> Ordered ,Mutable
   
   mC_tuple = (1, 2, 3, 4, 5,1 )  --->  ()     -->  Ordered ,Immutable No changable entries 
   
   mC_set = {1, 2, 3, 4, 5}    -->   {}     --> No duplicate entries 
   
   
 ------------------  
   
   my_dict = {  key --- value 
               "name": "Madhu", 
               "age": 30, 
			   "city": "Hyd"
			   "address"  "madhapur"
			   }
   
 ======
ORDERED: 
     POSTIONS OF DATA ARE FIXED  (LIST , TUPLE ) , Elements maintain their order; can be accessed via  Index.

Mutable:   Elements can be changed, added, or removed.

Duplicates: Allows duplicate elements.

 ================
 

1. List
        An ordered, mutable collection of elements. Can have duplicates 

 list = [1, 2, 3, 4, 1]

============================
2 Tuple
     An ordered, immutable collection of elements.Can have duplicates 

  tuple = (1, 2, 3, 4, 5,1 )
           
    Immutable: Once created, elements cannot be changed, added, or removed.
	
===========
3. Set
          An unordered, mutable collection of unique elements., NO DUPLICATES 
 set = {1, 2, 3, 4}

=============
4. Dictionary

        An unordered, mutable collection of key-value pairs.
		
   dict = {'NAME': 'MADHUKIRAN',
          'MOBILE': '7396627149'
		   'ADDRESS'  'MADHUKIRAN'
		 
		  
		  }


---------------------------------------

I have a list of user names. I need to remove duplicates and store them efficiently



  usernames = ["madhu", "kiran", "gorekar", "madhu", "xyz"]
  
  
  
          unique_usernames = list(set(usernames))
     
====================================================================
  
I'm building a contact book. I need to store names, phone numbers, and email addresses


contact = {
    "name": "Madhu",
    "phone": "7396627149",
    "email": "devopstraininghub@gmail.com"
   }
  

contact_book = [
    {"name": "Madhu", "phone": "7396627149", "email": "devopstraininghub@gmail.com"},
     {"name": "xyz", "phone": "7396627149",  "email": "xyz@gmail.com"},
]


==================================================

Real-Time DevOps Examples 

List:

Server IPs: 
       A list of IP addresses of servers in a Cluster, which may change as servers are added or removed.

   - Server IPs: ['192.168.1.1', '192.168.1.2', '10.81.0.3'] 

   
==============================


Tuple:

Server Configuration: 
          A tuple containing fixed information about a server (IP, OS, version). Once set, these details should not change.
		  
          Immutable System Settings: Information about the region, availability zone, and instance type, which remains constant for the duration of a deployment.
		  
   - Server Configuration: ('192.168.1.1', 'Ubuntu', '18.04') 
   - Immutable System Settings: ('US-East', 'us-east-1a', 'm5.large')		  
		  
====================
	  
Set:

    Active Services --- A set of active services running on a server, where uniqueness (no duplicates) is crucial.
	
    Unique Error Codes ---A set of unique error codes encountered during operations, useful for monitoring and alerting.

	- Active Services: {'nginx', 'redis', 'mysql', 'jenkins'} 
	- Unique Error Codes: {404, 500, 502}
	
=====================

Dictionaries :	
	
    Environment Variables: Key-value pairs representing environment variables for an application, where keys are unique and values can vary.
	
    Configurations: Dictionary of configurations, such as timeout settings and retry limits, where keys represent the setting and values are the parameters

    - Environment Variables: {'DB_HOST': 'db.example.com', 
	                           'DB_USER': 'admin'
							   
							   } 
	
    - Configurations: {
	                   'timeout': 30, 
					   'retries': 3
					   }
	


========================================================


	FUNCTIONS 
          -- BLOCK OF CODE FOR REPEATED USE 
		  -- ALLOWS TO GROUP A SET OF COMMANDS INTO A SINGLE, REUSABLE UNIT. 
		  -- BREAK DOWN TOTAL FUNCTIONALITY OF SCRIPT INTO LOGICAL SUB-SECTIONS 
          -- ENCAPSULATE AND REUSE CODE
		  -- WE CAN CALL FUNCTIONS WHEN EVER NEEDED
		  -- MAKE YOUR SCRIPTS MORE ORGANIZED, MODULAR, AND EASIER TO MAINTAIN.
		  
	

============================================================

FUNCTIONS IN PYTHON: 

# Python example

def greet(name):
    print(f"Hello, {name}!")

greet("Madhu")	

====================================================================


FUNCTIONS IN SHELL : 
# Bash example

greet() {
  echo "Hello, $1!"
}

greet "Madhu"

	
===============================================


1. PYTHON INSTALLATION - Windows 
                       - Linux 
					   - vscode
					   - github codespaces 


-m trace --trace

python -m trace --trace add_numbers.py 

=======================================


---------------------
PYTHON:

def function_name(parameters):
        # Commands to be executed
    return value

-------

SHELL :

function_name() {
        # Commands to be executed
}


========================================================

def greet():
    print ("hello , madhu")


greet()
greet(madhu)

=============================
def greet(name):
    print(f"hello, {name}")

greet("madhu")
greet("kiran")
greet("123")
=============================

def add_numbers(num1,num2):

    sum = num1 + num2
    return sum

result = add_numbers(3.2,4.1)

print(f"output is : {result}")


=============================


def add_numbers(a,b):

    sum = a + b
    return sum


num1 = float(input("Enter the 1st number:"))
num2 = float(input("Enter the 2nd number:"))

result = add_numbers(num1,num2)

print(f"output is : {result}")

=============================

FEW IMP/METHODS ON DATA TYPES :



==========================================================================================
LIST DATATYPE: 

mc_list = [1,2,3,4,4,1,9,3,1]

my_list.append(4)
print("After append:", my_list)


my_list.extend([8, 9, 7])
print("After extend:", my_list)


my_list.insert(0, 10)
print("After insert:", my_list)

# Removing the first occurrence of an element
my_list.remove(1)
print("After remove:", my_list)

# Popping an element (removing and returning it)
popped_element = my_list.pop()
print("Popped element:", popped_element)
print("After pop:", my_list)

# Getting the index of an element
index_of_9 = my_list.index(9)
print("Index of 9:", index_of_9)

# Counting the occurrences of an element
count_of_1 = my_list.count(1)
print("Count of 1:", count_of_1)

# Sorting the list
my_list.sort()
print("After sort:", my_list)

# Reversing the list
my_list.reverse()
print("After reverse:", my_list)

# Copying the list
copied_list = my_list.copy()
print("Copied list:", copied_list)

# Clearing the list
my_list.clear()
print("After clear:", my_list)

# List properties and functions
print("Length of  list:", len(my_list))
print("Length of copied list:", len(copied_list))
print("Maximum element:", max(copied_list))
print("Minimum element:", min(copied_list))
print("Sum of elements:", sum(copied_list))

  
============================================================================================
  
TUPLE :

Immutability: Tuples cannot be modified once created. Methods like append(), remove(), pop(), etc., are not available.


my_tuple = (3, 1, 4, 1, 5, 9, 2, 6, 5)

# Counting the occurrences of an element
count_of_1 = my_tuple.count(1)
print("Count of 1:", count_of_1)

# Getting the index of an element
index_of_9 = my_tuple.index(9)
print("Index of 9:", index_of_9)

# Getting the length of the tuple
length_of_tuple = len(my_tuple)
print("Length of tuple:", length_of_tuple)

# Finding the maximum element
max_element = max(my_tuple)
print("Maximum element:", max_element)

# Finding the minimum element
min_element = min(my_tuple)
print("Minimum element:", min_element)

# Calculating the sum of elements
sum_of_elements = sum(my_tuple)
print("Sum of elements:", sum_of_elements)

# Getting a sorted list from the tuple
sorted_list = sorted(my_tuple)
print("Sorted tuple as list:", sorted_list)

sorted_list.append(4)
print("After append:", sorted_list)

=================================================

SETS :


    No Duplicate Elements:   Sets automatically remove duplicate elements.
    Unordered: Sets do not maintain the order of elements.
    Mutable: You can add or remove elements from a set.
	
    Use Cases: Sets are useful for removing duplicates from a collection, checking for membership, and performing set operations like union, intersection, and difference.
    
	
	
my_set = {1, 2, 3, 4, 5}

# Adding an element
my_set.add(6)
print("After adding element 6 :", my_set)

# Removing an element (will raise KeyError if element is not present)
my_set.remove(4)
print("After removing element 4 :", my_set)


# Popping an arbitrary element
popped_element = my_set.pop()
print("Popped element:", popped_element)
print("After pop:", my_set)

# Clearing the set
my_set.clear()
print("After clear:", my_set)

# Set operations
set_a = {1, 2, 3}
set_b = {3, 4, 5}

# Union
union_set = set_a.union(set_b)
print("Union:", union_set)

# Intersection
intersection_set = set_a.intersection(set_b)
print("Intersection:", intersection_set)

# Difference
difference_set = set_a.difference(set_b)
print("Difference:", difference_set)


	
=============================================================================================================================

DICTIONARIES :

my_dict = {
    "name": "Madhu",
    "phone": "7396627149", 
    "city": "Hyderabad"
   }

# Accessing a value by key
name = my_dict['name']
print("Name:", name)

# Using get() to access a value
phone = my_dict.get('phone')
print("phone:", phone)

# Using get() with a default value
salary = my_dict.get('salary', 'Not Available')
print("Salary:", salary)

# Adding a new key-value pair
my_dict['occupation'] = 'DevOps Engineer'
print("After adding occupation:", my_dict)


# Removing a key-value pair using pop()
popped_value = my_dict.pop('phone')
print("Popped value:", popped_value)
print("After pop:", my_dict)


# Accessing all keys
keys = my_dict.keys()
print("Keys:", list(keys))

# Accessing all values
values = my_dict.values()
print("Values:", list(values))

# Accessing all key-value pairs
items = my_dict.items()
print("Items:", list(items))

# Clearing the dictionary
my_dict.clear()
print("After clear:", my_dict)

# Copying the dictionary
new_dict = {'a': 1, 'b': 2}
copied_dict = new_dict.copy()
print("Copied dictionary:", copied_dict)
	
		
========================================================================================================
x = 10

STATICALLY TYPED  VS DYNAMIC TYPED 
Dynamic typing means that the type of a variable is determined at runtime, not in advance. You do not need to declare the type of a variable when you create it. 


Static typing means that the type of a variable is known at compile time. You must declare the type of a variable before you use it, and this type cannot change throughout the program. Languages like C, C++, go  and Java are statically typed.


===================================================================================


LIST , TUPLE , DICT 
============================================================================
STRING MANIPULATION WITH in built METHONS /FUNCTIONS in python :



my_string = "Hello, Welcome to Aws Devops World"

# 1. Length of the string
print(f"Length of the string: {len(my_string)}")

# 2. Convert to uppercase and lowercase
print(f"Uppercase: {my_string.upper()}")
print(f"Lowercase: {my_string.lower()}")

# 3. Count occurrences of a substring
substring = "Welcome"
print(f"Occurrences of '{substring}': {my_string.count(substring)}")

# 4. Check if the string starts or ends with a particular substring
print(f"Starts with 'Hello': {my_string.startswith('Hello')}")
print(f"Ends with 'World.': {my_string.endswith('World')}")

# 5. Find the index of a substring (first occurrence)
print(f"Index of 'World': {my_string.find('World')}")

# 6. Replace a substring with another substring
new_string = my_string.replace('Aws', 'Cloud')
print(f"Original string: {my_string}")
print(f"Modified string: {new_string}")

# 7. Split the string into a list based on a delimiter
words = my_string.split()
print(f"Split into words: {words}")

# 8. Check if all characters are alphanumeric
alphanumeric_string = "Python123"
print(f"Is Python123 alphanumeric? {alphanumeric_string.isalnum()}")

# 9. Convert string to title case
title_case_string = "python programming"
print(f"Title case: {title_case_string.title()}")


============================================



# Integer examples
x = 10
y = -5
z = 0

# Floating-point examples
a = 3.14
b = -0.001


# Print examples
print(f"Integers: x = {x}, y = {y}, z = {z}")
print(f"Floating-point numbers: a = {a}, b = {b}, c = {c}")


# Arithmetic operations
print(f"\nArithmetic Operations:")
print(f"x + y = {x + y}")   # Addition
print(f"x - y = {x - y}")   # Subtraction
print(f"x * y = {x * y}")   # Multiplication
print(f"x / y = {x / y}")   # Division
print(f"x % y = {x % y}")   # Modulus


# Type conversions
print(f"\nType Conversions:")
f = float(x)
print(f"Convert int {x} to float: f = {f}")

g = int(a)
print(f"Convert float {a} to int: g = {g}")



===========================================

CONDITIONAL EXPRESSION : 

=================================================================

if condition1:
    # Block of code to execute if condition1 is True
   
elif condition2:
    # Block of code to execute if condition1 is False and condition2 is True
   
elif condition3:
    # Block of code to execute if previous conditions are False and condition3 is True
	
elif condition4:
    # Block of code to execute if previous conditions are False and condition4 is True	
   
else:
    # Block of code to execute if all previous conditions are False
   
=============

$ cat if.py

num1=float(input("enter the number:  "))

if num1 > 0:
    print ("THE NUMBER IS POSITIVE")

elif num1 < 0:
    print ("THE NUMBER IS NEGATIVE") 

else:
    print ("THE NUMBER IS ZERO")




===================================================================

PYTHON LOOPS :
      
WHILE 
FOR 

	 
	  
WHILE  LOOP:

  it enables you to execute set of commands as long as conndition is true . 
  
  once condition fails , it comes out of loop .
 
--------------- 
 #!/bin/bash
i=0
while [ "$i" -le 100 ];

do
        echo "$i"
         i=$((i+1))
done 
-----------

cat while.py

i = 0

while i < 100:
>   print(f"Number is: {i}")
    i = i + 1
	
--------------------------

i = 100

while i >= 0:
   print(i)
    i -= 1
	


=======================================

FOR LOOP : 

For loop operates on list of items , it repeats commands on every item in the list 

----------------
for variable in iterable:
    # Block of code to execute
    statement1
    statement2
    # More statements
	
	

-----------------------------------
mc_list = [1,2,3,4]

for i in mc_list:
    print(i)

-------------
print("APPEND LIST WITH NEW ELEMENT 5,6")

list.append(5)
list.append(6)

print(f"the modified list after append is {list}")
print("EXTEND LIST WITH NEW ELEMENTS 8,9,10,11,12,13")
list.extend([8,9,10,11,12,13])

print(f"the modified list is {list}")

------------------

PYTHON EXAMPLES : 

list = [ 1, 2, 3, 4] 
for i in list: 
    print(i) 

------------------   ### range(n) ---> 0 - n-1
for i in range(5):    
    print(i)

----------------

for number in range(1, 11):  ### range(k, n) ---> k ... n-1
    print(number)

----------------

fruits = ["apple", "banana", "cherry"]

for fruit in fruits:
    print(fruit)


=======================================================

In Python, break and continue are control flow statements used inside loops (for and while). They help control the flow of loop execution based on certain conditions


**a. break Statement:

Used to exit the loop prematurely.



**b. continue Statement:

Skips the rest of the current iteration and proceeds to the next iteration of the loop.

==========================================================
cat break_continue.py

counter = 0
while counter < 10:
>    counter += 1
    if counter == 5:
        break  # Exit the loop when counter is 5
       # continue
    print(f"Counter is {counter}")
print("Loop ended.")




======================================================

def add(a,b):
    return a + b 
----

result = add(3, 5)
print(result)  

-----------------------------
LAMBDA : 

lambda arguments: expression

   - a lambda function is a small, anonymous function defined using the lambda keyword. 
   
   
    lambda: Keyword to define an anonymous function.
    arguments: The input parameters to the function.
    expression: A single expression that the function returns.
	
	
cat lambda.py

#def add(a,b):
#    return a + b

#result  = add(5,9)
-------------


result = lambda a, b: a + b
print(f"sum of 5, 9 is {result(5, 9)}")

================================
>===================================================================

Keywords In Python:

Keywords in Python are reserved words that have special meanings and purposes within the language. These keywords cannot be used as identifiers (variable names, function names, etc.) because they are part of the language syntax.

List of keywords in Python: 
 
False      await      else       import     pass   None       break      except     in         raise
True       class      finally    is         return   and        continues   for        lambda     try
as         def        from       nonlocal   while assert     del        global     not        with
async      elif       if         or         yield

Description of Keywords:

1.	Boolean Values: True, False, and None are used to represent truth values (True and False) and a null value (None).

2.	Control Flow: Keywords like if, else, elif, while, for, break, continue, pass, and return are used for controlling the flow of execution in programs.

3.	Defining Entities: def is used to define functions, class is used to define classes, and lambda is used to create anonymous functions.

4.	Exception Handling: try, except, finally, and raise are used for handling exceptions and errors in Python programs.

5.	Importing Modules: import and from are used to import modules and contents from modules.

6.	Context Managers: with is used to manage resources and contexts that need cleanup actions.

7.	Operators: and, or, and not are logical operators used for boolean operations.

8.	Asyncio: async, await, and nonlocal are used in asynchronous programming (async and await) and for accessing variables in outer scopes (nonlocal).

9.	Assertions: assert is used to assert or enforce certain conditions in the code.



===================================================================================================
7 AUG 24 :


NAMING CONVENTION OF VARIABLES - BEST PRACTICES : Variable Naming Rules:



1.	Variables names must start with a letter (a-z, A-Z) or an underscore (_).
2.	The remaining characters can be letters, numbers, or underscores.
3.	Variable names are case-sensitive (age, Age, and AGE are three different variables).
4.	Python keywords (like if, else, for, etc.) cannot be used as variable names.

5.  Variables can be classified into GLOBAL scope variables and LOCAL scope variables 
                based on their scope, which determines where in your code they can be accessed and modified.

--------------------------				
Assigning Values to Variables:
You assign a value to a variable using the assignment operator =.
Examples:
# Assigning integers
age = 25

# Assigning floating-point numbers
height = 5.11

# Assigning strings
name = "Madhu"

# Assigning a boolean value
is_student = True

# Assigning a list
numbers = [1, 2, 3, 4, 5]

-------------------------------------

LOCAL VS GLOBAL VARIABLES 


---------------------------------
Global Scope Variables
Global variables are defined outside of any function and can be accessed (read and modified) by any part of the code, including inside functions.

--------
Local Scope Variables

Local variables are defined within a function and are only accessible within the scope of that function. They cannot be accessed outside the function.

-----------
Global Variables and Local Variables Together:

Variables with the same name can exist both globally and locally, but they are treated as separate variables with different scopes.
Example:


------------------------------------------------- 
cat local_global.py

x=10
y=20

def add():
    x=5
    y=4
    print(f" sum of local variables x=5 & y=4 {x+y} ")
	
def sub():
    x=35
    y=20
    print(f" subtraction of local variables x=35 & y=20 is:  {x-y} ")
add()
sub()

print(f"printing global vairable -x {x}")
print(f"printing global vairable -y {y}")

------------------------------------------------------
cat 2_modified_global.py

x=10
y=20
z=5
def add():
    x=5
    y=4
    print(f" sum of local variables x=5 , y=4 & global z=5 is:  {x+y+z} ")

def sub():
    global x
    x = 35
    y = 20
    print(f" subtraction of local variables x=35 & y=20 is:  {x-y} ")
add()
sub()

print(f"printing modified global vairable -x {x}")
print(f"printing global vairable -y {y}")



===============================================================================================


MODULES & PACKAGES
   
   modules and packages are fundamental concepts used TO ORGANIZE AND STRUCTURE CODE
  
   A module is A SINGLE FILE (WITH A .PY EXTENSION) that contains Python code. It can include functions, classes, and variables. You can also include runnable code. Modules are used to organize related code into a single file and to promote code reusability.
   
   
    # my_module.py
    
    def greet(name):
        return f"Hello, {name}!"
    
    def add(a, b):
        return a + b


----------------------------------------


# main.py

import my_module

print(my_module.greet("Madhu"))  # Output: Hello, Madhu!
print(my_module.add(5, 3))       # Output: 8


=======================================================================

PYTHON PACKAGE: 

A package is a way of organizing multiple related modules into a directory hierarchy. 
A PACKAGE IS A DIRECTORY THAT CONTAINS A SPECIAL FILE NAMED __INIT__.PY (WHICH CAN BE EMPTY) AND OTHER MODULES. 
The presence of __init__.py indicates that the directory should be treated as a package.


my_package/
    __init__.py
    module1.py
    module2.py

--------------
# module1.py

def function1():
    return "This is function 1 from module 1"

-----------

# module2.py

def function2():
    return "This is function 2 from module 2"

-----------

# main.py

from my_package import module1, module2

print(module1.function1())  # Output: This is function 1 from module 1
print(module2.function2())  # Output: This is function 2 from module 2





====================================================================================================================================
============================================================



ENVIRONMENT VARIABLE: available system-wide, and accessible by any child process.


Environment variables is a  way to provide input to a Python program from outside the code. 
-------------

On Unix/Linux/macOS:

export MY_ENV_VARIABLE="some_value"

===============================================================================
On Windows: 

set MY_VARIABLE=some_value

---------------
import os

user = os.getenv('USERNAME')
awsvar = os.getenv('MY_VARIABLE')

print(f"user env variable is : {user}")

print(f"aws variable is: {awsvar}")

==================
./abc.sh val1 val2 val3
===================================================================================================

COMMAND LINE ARGUMENTS:

Command-Line Arguments
Command-line arguments are values passed to a script when it is executed from the command line. They allow the user to provide input to the program dynamically.


sys.argv is a list in Python, which contains the command-line arguments passed to the script.

sys.argv[0] is the name of the script itself.

sys.argv[1] is the first command-line argument provided to the script.
sys.argv[2] is the second command-line argument provided to the script


-------------

# my_script.py "env" "rel_number"


import sys

env_name = sys.argv[1]
rel_number = sys.argv[2]


print(f"The environment to deploy:  {env_name} ")
print(f"The Release version is :  {rel_number} ")



--------------------


Example Combining Environment Variables and Command-Line Arguments

# combined_script.py
import os
import sys

user = os.getenv('USERNAME')
file_path = sys.argv[1]

print(f"user env variable is : {user}")
print(f"File Path: {file_path}")


============================================================
FILE OPERATIONS:  

Opening a File:

You can open a file using the open() function. 


file = open("devops_b15.txt", "r")  # Opens the file in read mode

Common modes include:

'r' : Read mode (default)
'w' : Write mode (creates a new file or truncates an existing file)
'a' : Append mode (writes data at the end of the file)



-------------------

# Writing to a file
with open('devops.txt', 'w') as file:
    file.write('Hello, World!-3\n')
    file.write('This is a test file.\n')


# Reading from a file
with open('devops.txt', 'r') as file:
    content = file.read()
    print(content)


# Appending to a file
with open('devops.txt', 'a') as file:
    file.write('Appending a new line.\n')


# Reading from a file
with open('devops.txt', 'r') as file:
    content = file.read()
    print(content)
	

===============================================


Closing a File
It's a good practice to close a file when you're done with it to free up system resources. 
Using 
   with open(...) as file: automatically closes the file when the block is exited.


file = open("devops.txt", "r")
content = file.read()
file.close()  # Manually closing the file



================================================================
Exception Handling:

Handling File Exceptions
It's important to handle potential exceptions that may occur during file operations.

FileNotFoundError, 
IOError
PermissionError
Disk Full
Device Not Ready
Hardware Failure

---------------------------------------------------------

try:
    with open('devops.txt', 'r') as file:
        content = file.read()
        print(content)
		
except FileNotFoundError:
    print("Error: The file was not found.")
except IOError:
    print("Error: An I/O error occurred.")
except PermissionError:
    print("Error: You do not have permission to read the file.")
except Exception as e:
    print(f"An unexpected error occurred: {e}")


===================================================================================

REAL TIME USE - CASES :


Write a Python script that checks if a server/host is up by pinging it.

---------------------

import os


def ping_server(server):
    response = os.system(f"ping -c 1 {server}")
    return response == 0


server = "google.com"


if ping_server(server):
    print(f"Server {server} is up")
else:
    print(f"Server {server} is down")
	
	
==============================================================

MODULES :

os: This module provides a way of using operating system-dependent functionality, such as creating directories or handling file paths.

shutil: This module provides a higher-level interface for file operations, including copying entire directories.

sys: 

psutil :
===================================

Example 2: Create a Directory Backup

Write a Python script that copies a directory to a backup location.

import shutil
import os

# Directory to backup
source_dir = r"C:\Users\Dell\Desktop\awskeys\aug7"

# Backup destination
backup_dir =  r"C:\Users\Dell\Desktop\awskeys\backupfiles"

# Ensure backup directory exists
os.makedirs(backup_dir, exist_ok=True)

# Copy the directory
shutil.copytree(source_dir, os.path.join(backup_dir, os.path.basename(source_dir)))

print("Backup completed successfully")

===========================================================================
DATE: 20 MAY 2025

Example 3: Monitor Disk Usage
Question:

Write a Python script that checks the disk usage of a directory and prints a warning if it exceeds a certain threshold.

----------------------------------

import shutil

#shutil: This module provides a higher-level interface for file operations, including copying entire directories.

monitor_dir = r"C:"
# Disk usage threshold (in percentage)
threshold = 80

# Get disk usage
total, used, free = shutil.disk_usage(monitor_dir)

print(total, used, free)   ## Print total, used, and free bytes on the disk

usage_percent = used / total * 100  

# Check if usage exceeds threshold
if usage_percent > threshold:
    print(f"Warning: Disk usage is {usage_percent:.2f}%")
else:
    print(f"Disk usage is {usage_percent:.2f}%, within the threshold")
	
	
************
Normally, Python treats backslashes (\) in strings as escape characters (for example, \n means newline, \t means tab).
A raw string tells Python to treat backslashes literally, without interpreting them as escape sequences.
*******************	
	
=================================================================	

Example 4:
Python code to get CPU and RAM utilization
	
	
import psutil

# CPU utilization (percentage)
cpu_percent = psutil.cpu_percent(interval=1)  # interval=1 means measure over 1 second
print(f"CPU Utilization: {cpu_percent}%")

# RAM utilization
memory_info = psutil.virtual_memory()
print(f"RAM Utilization: {memory_info.percent}%")

### memory_info is a objeect , It returns an object (a special kind of variable) called a named tuple.


	
=========================================================================
Example 5: Start and Stop a Service
Question:
Write a Python script that starts and stops a system service.

import os

# Function to start a service
def start_service(service_name):
    os.system(f"sudo systemctl start {service_name}")
    print(f"Service {service_name} started")

# Function to stop a service
def stop_service(service_name):
    os.system(f"sudo systemctl stop {service_name}")
    print(f"Service {service_name} stopped")



# Service to manage
service_name = "jenkins"




# Start and stop the service
start_service(service_name)
stop_service(service_name)
status_service(service_name)
============================================================
Example 5: List Docker Containers
docker ps -a


Question:
Write a Python script that lists all running Docker containers.

import os

# List running Docker containers
os.system("docker ps")

print("Listed all running Docker containers")


==================================================================

#The Boto3 library is official aws sdk for python . 


import boto3

def create_ec2_instance(instance_type, ami_id):
    # Connect to EC2 as a resource
    ec2 = boto3.resource('ec2')
    
    # Create a new EC2 instance
    instances = ec2.create_instances(
        ImageId=ami_id,            # AMI ID (e.g., Amazon Linux or Ubuntu image)
        InstanceType=instance_type, # Instance type (e.g., 't2.micro')
        MinCount=1,                # Minimum number of instances to launch
        MaxCount=1                 # Maximum number of instances to launch
    )
    
    # Get the instance object and print its ID
    instance = instances[0]
    print(f"Created EC2 instance with ID: {instance.id}")




create_ec2_instance('t2.micro', 'ami-036c2987dfef867fb')




===================
