Before VCS (Version Control System) like Git, developers used several manual techniques to track and manage changes
in files. However, these methods had significant limitations.

--> Developers manually created copies of files with different versions, often using filenames like
project_v1.doc, project_v2.doc, final_project.doc, final_project_revised.doc

1) No automatic versioning: Manual file copies led to confusion and redundancy.
2) Difficult Collaboration: Multiple users editing the same file could cause conflicts and overwrites.
3) Storage inefficiency: Keeping multiple copies of files consumed excessive disk space.
4) No change history: No way to track who made changes, when or why
5) Error-prone merging: Merging changes manually was slow and risky.
6) No Rollback mechanism: If a mistake was made, recovering an old version was difficult.
7) Lack of Security: Files could be accidentally deleted or modified without tracking
8) No branching support: Experimenting with different versions required manual duplication.

VCS:
====
It solved the problems of file tracking by introducing structured and automated version management.

1) Automatic versioning: VCS tracks all changes automatically, eliminating the need for manual file copies.
2) Efficient collaboration: Multiple users work on the same project without overwriting each other's changes.
3) Storage optimization: Instead of duplicating entire files, VCS stores only changes, saving disk space.
4) Change history: Every modification is recorded with details like author, timestamp, and commit message.
5) Easy merging: Advanced algorithms help merge changes from multiple contributors without conflicts
6)Rollback & Recovery: Developers can revert to previous versions if needed.
7) Security & Access control: Permissions and authentication ensure controlled access to files
8) Branching & Experimentation: Developers can create separate branches for new features, test them, and merge when ready.


Types of VCS: 
1)Centralized version control systems (CVCS)
==> A single central server stores all versioned files.
==> Developers pull and push changes to/from this central repository
* Enterprise applications with strict access control is the use case.
* Developers depend on central server, causing conflicts if multiple people edit the same file.
eg: SVN --> Subversion
    CVS --> Concurrent Version System
    Perforce --> Helix Core

Limitations:
* Single point of failure leads to no access
* Requires internet connection for most operations
* Slow for large teams and projects.
* If central server fails, data loss is possible.

2) Distributed Version Control System (DVCS)
==> Each developer has a complete copy of the repository, including history.
==> Supports offline work and faster operations.

Eg:
Git (most popular, used in GitHub, GitLab, Bitbucket)
Mercurial
Bazaar

Advantages over CVCS:
* No central dependency
* Faster and more efficient branching/merging.
* Developers can work offline.


Git:
=======
* It is an application/software.
* It is a distributed version control system
* Used to track changes in code or files in a project.
* installed on local system.

Git Hub:
--------
* It is a website
* Cloud based
* Store Git repositories online.
* for project management and collaboration

Git install:
===========
Go to browser or google, type "git download/git bash download"
click "windows", install.

In Linux
==============
yum install git -y

GitHub account:
=============
Go to browser, type GitHub, click on first link, signup (for new account), enter email, set password, enter username, continue, solve puzzle, create account, enter code, (2-5) people, teacher, continue for free

It opens a GitHub account.

=======================
Basic Linux commands used in Git:
=======================
pwd --> Prints current working directory
cd --> change directory
cd .. --> back to previous directory
touch filename  --> creates a new file
mkdir directoryname --> creates a new directory
cat filename --> displays content in a file
vi/vim editor/nano editor  --> text editors used in Linux
history --> displays previously executed commands
rm -rf <filename> --> deletes files/directories forcefully and recursively
clear or ctrl+l --> to clear the space

ls--> lists files/directories
ls -la --> lists files including hidden files
ls -lrth 
ll
============================
Git concepts: Global Information Tracker
*********************
mkdir <directoryname>
git init --> initialize an empty repository
ll
ls -la
(default branch is master)

Git configuration:(we need to configure to know who made changes and which commit made by whom while working on a project)
1) System level 2) user level (global) 3) Repository level
git config --system --list :(It automatically applies configurations to who all are accounts present in the system)

2)User level: git config --global --list
git config --global user.name "hyma"
git config --global user.email "hyma@gmail.com"

git config --list: it displays system and user level configurations in git.

=====================

Git Workflow/Stages:
**********************
1) Working directory
2) staging area/index
3) Local repository
4) Remote repository
-----------------------
create a file
touch f1
git status (it will be under untracked state -> workspace/working directory)
git add <filename> --> file moved to staging area and it is tracked
git commit -m "commit message> <filename> --> file is committed to local repo
git status : to check the status of files
git log: to check the history of commits
git show <commitid> --> detailed info about specific commit.
git push: push changes in files from Local repository to cloud repository
git clone: copy of a project/folder directly from cloud repo to working directory ( no need to use git init)


you can do same for multiple files also.

git add .
git commit -m "commit message"
(all files tracked and committed at once)

**********************
GitHub account:

medagamreddy306@gmail.com
h9y3m9a2
username: hymamedagam

created repository: hymadevopsrepo
githubtoken: 

***********************
task-1: practice on local repo
task-2: create own central repo and clone it to local repo and again push the code to central repo.
task-3: clone devopstraininghub(b15 repo url) and perform below steps and push it to devopstraininghub repo
git clone <url>
cd <repo name>
ll
touch xyz
git status
git add .
git status
git commit -m "commit message"
git status
git log
git push

git pull -rebase: get file changes from remote repo to local repo
git clone --> get changes in files from central(remote( repo to local repo)

create a new repository in GitHub account dashboard.

git clone <url>
cd <repo name>
ll
touch filename
ll
git status
git add .
git status
git commit -m "commit message" filename
git status
git log
git push( it opens a pop at first time)

we can push code from local repo to central repo in two ways.
1) sign in with browser (username, password)
2) Token (settings> developer options> personal access tokens> general (classic))

========================================
Branching:
===============
--> Independent line of development
--> Developers creates branches to work on independent features for significant changes, releases etc., without effecting the main code.
--> main branch contains the production deployable code.
local repo
===========
git branch : check the status of branch/which branch it is
git branch <branch name> : create a new branch
git checkout <branch name> : switch between branches
git checkout -b <branch name>: create and switch to a new branch
git checkout main/master
git merge <branch name>

git branch -d <branch name>: deletes the branch after merging with the main branch
git branch -D <branch name>: deletes the branch without merging with the main branch

default branch master

central repo:
=============
default branch main

git clone <url>
ll
cd <repo name>
git branch

git branch <branchname>
git branch
git checkout <branch name>
ll

don't merge branches with main branch --> as main branch contains ongoing production code
==> push branch to central repo : git push <GitHub url> <branch name>


origin -> reference to our repo url

git push origin <branch name>

Task 4: our branches needs to be displayed in Madhu sir's central repo.
task 5: push folders to Madhu sir's central repo

mkdir dir1
cd dir1
touch hyma1 hyma2
git status
git add .
git commit -m "mssg"
git status
git push

git push --> push to main branch
git push origin --> pushes to sub branch

task: practice branching on locally (git init)
task: clone, create branch, push (centrally clone)

central repo: delete branch in central repo 
git push origin -d <branch name>

Note: we only push code after cloning repo to local repo.

git clone <url>
git push

====================================
Edit files in Linux:
----------------------
LINUX FILE EDITOR: Vi/Vim editor / nano editor

vim <filename>
--
--
--
--
esc--i (Insert)
(add data)
esc:wq  (save and quit)
esc:w (save)
esc:q (quit)
esc:q! (forcefully close without save the data)

if you want to delete data in vim editor use backspace

What if two branches are parallelly moving:
--------------------------------------------
--> After commit only we can see branch.
--> when we are merging one branch with another branch, a new merge commit id is created.

=> git cherry-pick <commit_id>: merge specific commit from one branch with another branch.

Git merge conflicts:
=================
--> If two branches contain same filename(different code), it will not be able to merge.

-->If two branches contain same filename(same code), it will be able to merge.

--> merge conflict occurs, when two developers working on the same file but content is different

